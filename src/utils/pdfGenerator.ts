
// Dynamic import of jspdf and related dependencies
export const downloadPolicyAsPDF = async (content: string, filename: string, title: string) => {
  try {
    // Dynamically import the required libraries
    const { default: jsPDF } = await import('jspdf');
    
    // Create a new PDF document
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    // Add header with logo
    doc.setFillColor(52, 120, 246); // Blue header
    doc.rect(0, 0, 210, 20, 'F');
    
    // Set font size and styles for title
    doc.setTextColor(255, 255, 255); // White text for header
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    
    // Add title
    doc.text("ComplyFlow", 10, 10);
    doc.setFontSize(10);
    doc.text("Compliance made simple", 10, 15);
    
    // Add document title
    doc.setTextColor(0, 0, 0); // Black text for content
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text(title, 20, 30);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    // Add generation date
    const today = new Date();
    doc.setFontSize(10);
    doc.text(`Generated: ${today.toLocaleDateString()}`, 20, 38);
    
    // Split content into lines
    const lines = content.split('\n');
    let y = 45; // Start position after header and title
    let currentPage = 1;
    
    // Add page number to first page
    doc.setFontSize(8);
    doc.text(`Page ${currentPage}`, 190, 287);
    
    // Process content lines
    for (const line of lines) {
      // Check if line is a header
      if (line.startsWith('# ')) {
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        y += 10;
      } else if (line.startsWith('## ')) {
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        y += 8;
      } else if (line.startsWith('### ')) {
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        y += 7;
      } else if (line.startsWith('- ')) {
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        y += 6;
      } else if (line.trim() === '') {
        y += 3;
        continue;
      } else {
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        y += 6;
      }
      
      // Remove markdown characters for PDF output
      let cleanLine = line;
      if (line.startsWith('# ')) cleanLine = line.substring(2);
      else if (line.startsWith('## ')) cleanLine = line.substring(3);
      else if (line.startsWith('### ')) cleanLine = line.substring(4);
      else if (line.startsWith('- ')) cleanLine = "â€¢ " + line.substring(2);
      
      // Add new page if needed
      if (y > 270) {
        doc.addPage();
        currentPage++;
        y = 30;
        
        // Add blue header to new page
        doc.setFillColor(52, 120, 246);
        doc.rect(0, 0, 210, 15, 'F');
        
        // Add header text to new page
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(12);
        doc.text("ComplyFlow", 10, 10);
        
        // Reset text color for content
        doc.setTextColor(0, 0, 0);
        
        // Add page number
        doc.setFontSize(8);
        doc.text(`Page ${currentPage}`, 190, 287);
      }
      
      // Add text - wrapped for long lines
      const textWidth = doc.getStringUnitWidth(cleanLine) * 10 / doc.internal.scaleFactor;
      if (textWidth > 170) {
        const splitText = doc.splitTextToSize(cleanLine, 170);
        doc.text(splitText, 20, y);
        y += (splitText.length - 1) * 5; // Add extra space for wrapped lines
      } else {
        doc.text(cleanLine, 20, y);
      }
    }
    
    // Add footer with company information
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text("Generated by ComplyFlow Compliance Management System", 20, 280);
    
    // Save the PDF
    doc.save(filename);
    return true;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
};
